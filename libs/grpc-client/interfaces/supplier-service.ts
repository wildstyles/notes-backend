// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v3.19.4
// source: supplier-service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export enum SupplierCategory {
  PIZZA = 0,
  ITALIAN = 1,
  UKRAINIAN = 2,
  BURGER = 3,
  UNRECOGNIZED = -1,
}

export interface Supplier {
  id: string;
  name: string;
  address: SupplierAddress | undefined;
  startWorkingTime: string;
  endWorkingTime: string;
  categories: SupplierCategory[];
}

export interface Supply {
  id: string;
  supplierId: string;
  name: string;
  description: string;
  price: number;
}

export interface CreateSupplierRequest {
  name: string;
  address: SupplierAddress | undefined;
  startWorkingTime: string;
  endWorkingTime: string;
  categories: SupplierCategory[];
}

export interface UpdateSupplierRequest {
  id: string;
  name: string;
  address: SupplierAddress | undefined;
  startWorkingTime: string;
  endWorkingTime: string;
  categories: SupplierCategory[];
}

export interface CreateSupplierResponse {
  id: string;
}

export interface UpdateSupplierResponse {
  supplier: Supplier | undefined;
}

export interface CreateSupplyRequest {
  supplierId: string;
  name: string;
  description: string;
  price: number;
}

export interface CreateSupplyResponse {
  id: string;
}

export interface SupplierAddress {
  street: string;
  floor: number;
}

export interface RollbackCreateSupplierRequest {
  id: string;
}

export interface RollbackCreateSupplierResponse {
  id: string;
}

export interface SupplierServiceClient {
  createSupplier(request: CreateSupplierRequest): Observable<CreateSupplierResponse>;

  updateSupplier(request: UpdateSupplierRequest): Observable<UpdateSupplierResponse>;

  createSupply(request: CreateSupplyRequest): Observable<CreateSupplyResponse>;

  rollbackCreateSupplier(request: RollbackCreateSupplierRequest): Observable<RollbackCreateSupplierResponse>;
}

export interface SupplierServiceController {
  createSupplier(
    request: CreateSupplierRequest,
  ): Promise<CreateSupplierResponse> | Observable<CreateSupplierResponse> | CreateSupplierResponse;

  updateSupplier(
    request: UpdateSupplierRequest,
  ): Promise<UpdateSupplierResponse> | Observable<UpdateSupplierResponse> | UpdateSupplierResponse;

  createSupply(
    request: CreateSupplyRequest,
  ): Promise<CreateSupplyResponse> | Observable<CreateSupplyResponse> | CreateSupplyResponse;

  rollbackCreateSupplier(
    request: RollbackCreateSupplierRequest,
  ):
    | Promise<RollbackCreateSupplierResponse>
    | Observable<RollbackCreateSupplierResponse>
    | RollbackCreateSupplierResponse;
}

export function SupplierServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createSupplier", "updateSupplier", "createSupply", "rollbackCreateSupplier"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SupplierService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SupplierService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SUPPLIER_SERVICE_NAME = "SupplierService";
