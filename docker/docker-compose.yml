version: '3.8'
services:
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.3.2
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - 2181:2181

  # kafka:
  #   image: confluentinc/cp-kafka:7.3.2
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 9092:9092
  #     - 29092:29092
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # kafka_ui:
  #   image: provectuslabs/kafka-ui:latest
  #   depends_on:
  #     - kafka
  #   ports:
  #     - 8080:8080
  #   environment:
  #     LOGGING_LEVEL_ROOT: error
  #     KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  postgres-db:
    container_name: postgres-db
    restart: always
    image: postgres:15.6-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      # postgres doesn't create DB automatically. Find a way to create DB automatically on init
      - pgdata:/var/lib/postgresql/data
    ports:
      - '${DB_PORT}:5432'
    networks:
      - postgres-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d ${DB_NAME} -U ${DB_USER}']
      interval: 10s
      timeout: 2s
      retries: 10

  gateway-service:
    image: notes-backend/gateway-service
    # depends_on:
    # - kafka
    container_name: gateway-service
    build:
      args:
        - APP=gateway-service
      context: .
      dockerfile: ../docker/Dockerfile.local2
    volumes:
      - ../:/app
    ports:
      - 3000:3000
    networks:
      # - loki
      - ms-network

  supplier-service:
    image: notes-backend/supplier-service
    depends_on:
      - postgres-db
      - gateway-service
    container_name: supplier-service
    build:
      args:
        - APP=supplier-service
      context: .
      dockerfile: ../docker/Dockerfile.local2
    networks:
      # - loki
      - ms-network
      - postgres-network
    volumes:
      - ../:/app

  # user-service:
  #   image: notes-backend/user-service
  #   depends_on:
  #     - postgres-db
  #     - gateway-service
  #   container_name: user-service
  #   build:
  #     context: .
  #   command: yarn start:dev user-service
  #   networks:
  #     - postgres-network
  #     - loki
  #   volumes:
  #     - .:/app

networks:
  postgres-network:
    driver: bridge
  ms-network:
    driver: bridge
  # loki:
  #   external: true
  #   name: notes-backend_loki

volumes:
  pgdata:
    name: postgres_delivery
    driver: local
